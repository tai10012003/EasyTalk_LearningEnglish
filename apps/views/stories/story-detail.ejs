<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chi Tiết Câu Chuyện</title>
    <link rel="icon" href="/static/images/favicon.png">
    <script src="/static/js/authentication.js"></script>
    <link rel="icon" href="/static/images/favicon.png">
    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    <!-- Animate CSS -->
    <link rel="stylesheet" href="/static/css/animate.css">
    <!-- Owl Carousel CSS -->
    <link rel="stylesheet" href="/static/css/owl.carousel.min.css">
    <!-- Themify Icons -->
    <link rel="stylesheet" href="/static/css/themify-icons.css">
    <!-- Flaticon CSS -->
    <link rel="stylesheet" href="/static/css/flaticon.css">
    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="/static/css/magnific-popup.css">
    <!-- Swiper CSS -->
    <link rel="stylesheet" href="/static/css/slick.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="/static/css/style.css">
    <link rel="stylesheet" href="/static/css/main.css">
    <style>
        .story-container {
            border: none;
            margin: 115px auto 20px auto;
            max-width: 1000px;
            padding: 30px 50px 50px 50px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.051);
            border-radius: 10px;
            background-color: #fff;
        }

        .story-title {
            font-size: 28px;
            font-weight: bold;
            color: #333;
            text-transform: uppercase;
        }

        .english-sentence {
            font-size: 16px;
            color: #333;
            margin: 30px 0 15px 0;
        }

        .vietnamese-translation {
            font-size: 16px;
            color: #333;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            line-height: 1.7;
            display: none;
        }

        .vocabulary-section {
            margin-top: 5px;
            padding: 20px;
            border-radius: 10px;
        }

        .vocabulary-section p {
            font-size: 18px;
            color: #333;
            font-weight: bold;
            margin-bottom: 10px;
            border-bottom: 2px solid #b70909;
            padding-bottom: 5px;
            display: inline-block;
            width: auto;
            padding-right: 10px;
        }

        #vocabulary-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #vocabulary-list li {
            font-size: 16px;
            color: #555;
            margin-bottom: 8px;
            padding: 10px 15px;
            background-color: #fff;
            border-radius: 5px;
            border: 1px solid #e3e3e3;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        #vocabulary-list li:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            border-color: #883410;
        }

        .btn-section {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn {
            font-size: 16px;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: transform 0.2s ease-in-out;
        }

        .btn:hover {
            transform: scale(1.05);
            color: #fff;
        }

        .btn-translate {
            background-color: #ff5722;
            color: white;
            border: none;
        }

        .btn-listen {
            background-color: #007bff;
            color: white;
            border: none;
        }

        .btn-next {
            background-color: #6c757d;
            color: white;
            border: none;
        }
        
        .btn-icon-listen {
            background: none;
            border: none;
            font-size: 20px;
            color: #000;
            cursor: pointer;
            margin-right: 10px;
            vertical-align: middle;
            transition: color 0.3s ease;
        }

        .full-story-container {
            margin: 0 auto 50px auto;
            max-width: 1000px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            display: none;
        }

        .full-story-header {
            font-size: 25px;
            font-weight: bold;
            color: #b21010;
            margin: 15px 0;
            text-align: center;
            text-transform: uppercase;
        }

        .btn-toggle-full-story {
            background-color: #6c757d;
            color: white;
            border: none;
            margin: 10px auto 30px auto;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
        }
        .completion-message {
            font-size: 22px;
            font-weight: bold;
            color: green;
            text-align: center;
            margin: 130px auto 10px auto;
            display: none;
        }
        .centered-buttons {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .centered-buttons button {
            margin: 10px 5px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #6c757d;
            color: white;
            transition: background-color 0.3s ease;
        }

        .centered-buttons button:hover {
            background-color: #4e4c4c;
        }

        #retryButton {
            background-color: #be2929;
        }

        #retryButton:hover {
            background-color: #911f1f;
        }
    </style>
</head>
<body>
    <%- include('../partials/menu.ejs') %>
    <div class="story-container">
        <h1 class="story-title" id="story-title"></h1>
        <div class="english-sentence">
            <button class="btn-icon-listen" id="listen-btn">
                <i class="fas fa-volume-up"></i>
            </button>
            <span id="sentence-text"></span>
        </div>               
        <div class="vietnamese-translation" id="vietnamese-translation"></div>
        <div class="vocabulary-section" id="vocabulary-section">
            <p><strong>Chú thích từ vựng:</strong></p>
            <ul id="vocabulary-list"></ul>
        </div>
        <div class="btn-section">
            <button class="btn btn-translate" id="translate-btn">Dịch nghĩa</button>
            <button class="btn btn-next" id="next-btn">Tiếp theo</button>
        </div>
    </div>
    <p id="completion-message" class="completion-message" style="display: none;">
        Bạn đã hoàn thành câu chuyện!
        <div class="centered-buttons">
            <button id="retryButton" onclick="retryStory()" style="display: none;">Làm lại</button>
            <button id="backButton" onclick="goBackToList()" style="display: none;">Quay lại</button>
        </div>
    </p>        
    <div class="d-flex justify-content-center">
        <button class="btn-toggle-full-story" id="toggle-full-story-btn">Hiển thị toàn bộ câu chuyện</button>
    </div>
    <div class="full-story-container" id="full-story-container">
        <p class="full-story-header">Câu chuyện đầy đủ</p>
        <button class="btn-icon-listen" id="listen-full-story-btn">
            <i class="fas fa-volume-up"></i>
        </button>
        <p id="full-story-text"></p>
    </div>
    <%- include('../partials/footer.ejs') %>
    <script src="/static/js/jquery-1.12.1.min.js"></script>
    <script src="/static/js/popper.min.js"></script>
    <script src="/static/js/bootstrap.min.js"></script>
    <script src="/static/js/jquery.magnific-popup.js"></script>
    <script src="/static/js/swiper.min.js"></script>
    <script src="/static/js/masonry.pkgd.js"></script>
    <script src="/static/js/owl.carousel.min.js"></script>
    <script src="/static/js/jquery.nice-select.min.js"></script>
    <script src="/static/js/slick.min.js"></script>
    <script src="/static/js/jquery.counterup.min.js"></script>
    <script src="/static/js/waypoints.min.js"></script>
    <script src="/static/js/custom.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script> 
    <script>
        const storyId = window.location.pathname.split('/').pop();
        let storyData = null;
        let currentSegmentIndex = 0;
        let speechSynthesisUtterance = null; 
    
        async function fetchStory() {
            try {
                const response = await fetch(`/story/api/${storyId}`);
                const data = await response.json();
    
                if (data && data.content) {
                    storyData = data;
                    document.getElementById("story-title").textContent = storyData.title;
                    document.getElementById("full-story-text").textContent = storyData.content;
                    renderSegment();
                } else {
                    alert("Failed to load story data or no content available!");
                }
            } catch (error) {
                console.error("Error fetching story:", error);
            }
        }
    
        function getSegments(content) {
            if (!content) return [];
            return content.split('.').map(segment => segment.trim()).filter(segment => segment.length > 0);
        }
    
        async function renderSegment() {
            const segments = getSegments(storyData?.content);
            const englishSentence = document.getElementById("sentence-text");
            const vietnameseTranslation = document.getElementById("vietnamese-translation");
            const vocabularyList = document.getElementById("vocabulary-list");
            const nextBtn = document.getElementById("next-btn");
            const completionMessage = document.getElementById("completion-message");
            const retryButton = document.getElementById("retryButton");
            const backButton = document.getElementById("backButton");

            if (currentSegmentIndex < segments.length) {
                const currentSegment = segments[currentSegmentIndex];
                englishSentence.textContent = currentSegment;
                vietnameseTranslation.style.display = "none";
                vietnameseTranslation.textContent = "";

                const vocabularies = await generateVocabulary(currentSegment);
                vocabularyList.innerHTML = vocabularies
                    .map(vocab => `<li><strong>${vocab.word}:</strong> ${vocab.meaning}</li>`)
                    .join("");

                nextBtn.style.display = "block";
                completionMessage.style.display = "none";
                retryButton.style.display = "none";
                backButton.style.display = "none";
                playSpeech(currentSegment);
            } else {
                document.querySelector(".story-container").style.display = "none";
                nextBtn.style.display = "none";
                completionMessage.style.display = "block";
                retryButton.style.display = "inline-block";
                backButton.style.display = "inline-block";
            }
        }
    
        async function generateVocabulary(segment) {
            const words = segment.split(/\s+/).map(word => word.replace(/[^a-zA-Z]/g, '').toLowerCase());
            const uniqueWords = [...new Set(words)];
            const randomWords = uniqueWords.sort(() => Math.random() - 0.5).slice(0, 3);
    
            const vocabularies = [];
            for (const word of randomWords) {
                const meaning = await translateWord(word);
                vocabularies.push({ word, meaning });
            }
            return vocabularies;
        }
    
        async function translateWord(word) {
            try {
                const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=en|vi`);
                const data = await response.json();
                return data.responseData.translatedText || "[No meaning found]";
            } catch (error) {
                console.error("Error translating word:", error);
                return "[Translation error]";
            }
        }
    
        async function translateSegment() {
            const text = document.getElementById("sentence-text").textContent;
            if (!text) return;
    
            try {
                const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|vi`);
                const data = await response.json();
                document.getElementById("vietnamese-translation").textContent = data.responseData.translatedText || "Translation failed!";
                document.getElementById("vietnamese-translation").style.display = "block";
            } catch (error) {
                console.error("Error translating segment:", error);
            }
        }
    
        function playSpeech(text) {
            if (speechSynthesisUtterance) {
                window.speechSynthesis.cancel();
            }
            speechSynthesisUtterance = new SpeechSynthesisUtterance(text);
            speechSynthesisUtterance.lang = "en-US";
            speechSynthesisUtterance.rate = 1;
            window.speechSynthesis.speak(speechSynthesisUtterance);
        }
    
        function listenSegment() {
            const text = document.getElementById("sentence-text").textContent;
            if (!text || !window.speechSynthesis) return;
            playSpeech(text);
        }
    
        document.getElementById("next-btn").addEventListener("click", () => {
            const segments = getSegments(storyData?.content);
            if (currentSegmentIndex < segments.length - 1) {
                currentSegmentIndex++;
                renderSegment();
            } else {
                currentSegmentIndex++;
                renderSegment();
            }
        });

        function retryStory() {
            currentSegmentIndex = 0;
            document.querySelector(".story-container").style.display = "block";
            document.getElementById("completion-message").style.display = "none";
            document.getElementById("retryButton").style.display = "none";
            document.getElementById("backButton").style.display = "none";
            renderSegment();
        }

        function goBackToList() {
            window.location.href = "/story";
        }
    
        document.getElementById("translate-btn").addEventListener("click", async () => {
            const text = document.getElementById("sentence-text").textContent;
            if (!text) return;

            try {
                const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|vi`);
                const data = await response.json();
                document.getElementById("vietnamese-translation").textContent = data.responseData.translatedText || "Translation failed!";
                document.getElementById("vietnamese-translation").style.display = "block";
            } catch (error) {
                console.error("Error translating segment:", error);
            }
        });

        document.getElementById("listen-btn").addEventListener("click", listenSegment);
        
        document.getElementById("listen-full-story-btn").addEventListener("click", () => {
            const fullText = document.getElementById("full-story-text").textContent;
            playSpeech(fullText);
        });

        document.getElementById("toggle-full-story-btn").addEventListener("click", () => {
            const fullStoryContainer = document.getElementById("full-story-container");
            const toggleBtn = document.getElementById("toggle-full-story-btn");

            if (fullStoryContainer.style.display === "none" || fullStoryContainer.style.display === "") {
                fullStoryContainer.style.display = "block";
                toggleBtn.textContent = "Ẩn toàn bộ câu chuyện";
            } else {
                fullStoryContainer.style.display = "none";
                toggleBtn.textContent = "Hiển thị toàn bộ câu chuyện";
            }
        });
        
        fetchStory();
    </script>       
</body>
</html>