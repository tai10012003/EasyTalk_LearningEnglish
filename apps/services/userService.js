const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const config = require("../config/setting");
const { getGoogleUser } = require("../util/googleAuth");
const { getFacebookAccessToken, getFacebookUser } = require("../util/facebookAuth");
const { UserRepository } = require("./../repositories");
const NotificationService = require("./notificationService");
const notificationService = new NotificationService();
const UserSettingService = require("./usersettingService");
const usersettingService = new UserSettingService();
const UserprogressService = require("./userprogressService");
const userprogressService = new UserprogressService();

class UserService {
    constructor() {
        this.userRepository = new UserRepository();
        this.verificationCodes = {};
        this.refreshTokens = new Map();
        this.transporter = nodemailer.createTransport({
            service: "gmail",
            auth: { user: config.email.user, pass: config.email.pass },
        });
    }

    async getUserList(page = 1, limit = 12, role = "") {
        const skip = (page - 1) * limit;
        const filter = {};
        if (role) filter.role = role;
        const { users, total } = await this.userRepository.findAll(filter, skip, limit);
        return { users, totalUsers: total };
    }

    async getUser(id) {
        return await this.userRepository.findById(id);
    }

    async getUserByEmail(email) {
        return await this.userRepository.findByEmail(email);
    }

    async updatePassword(userId, hashedNewPassword) {
        return await this.userRepository.updatePassword(userId, hashedNewPassword);
    }

    async insertUser(user) {
        return await this.userRepository.insert(user);
    }

    async updateUser(user) {
        const { _id, ...updateFields } = user;
        return await this.userRepository.update(_id, updateFields);
    }

    async resetTempPassword(userId) {
        const user = await this.userRepository.findById(userId);
        if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
        const tempPassword = Math.random().toString(36).slice(-8);
        const hashedTempPassword = await bcrypt.hash(tempPassword, 10);
        await this.userRepository.updatePassword(userId, hashedTempPassword);
        const mailOptions = {
            from: config.email.user,
            to: user.email,
            subject: "üîë M·∫≠t Kh·∫©u T·∫°m Th·ªùi M·ªõi T·ª´ EasyTalk",
            html: `
            <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 8px; color: #333;">
                <h2 style="text-align: center; color: #4CAF50;">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u t·∫°m th·ªùi üîí</h2>
                <p>Xin ch√†o <strong>${user.username}</strong>,</p>
                <p>ƒê√¢y l√† th√¥ng b√°o t·ª´ h·ªá th·ªëng <strong>EasyTalk</strong>.</p>
                <p>Qu·∫£n tr·ªã vi√™n ƒë√£ ti·∫øn h√†nh <strong>ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·∫°m th·ªùi</strong> cho t√†i kho·∫£n c·ªßa b·∫°n nh·∫±m ƒë·∫£m b·∫£o t√≠nh an to√†n v√† b·∫£o m·∫≠t.</p>
                <p>B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m·∫≠t kh·∫©u t·∫°m th·ªùi b√™n d∆∞·ªõi ƒë·ªÉ ƒëƒÉng nh·∫≠p:</p>
                <div style="text-align: center; margin: 25px 0;">
                <h2 style="color: #4CAF50; letter-spacing: 2px;">${tempPassword}</h2>
                </div>
                <p style="font-size: 15px;">V√¨ l√Ω do b·∫£o m·∫≠t, <strong>b·∫°n n√™n ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi ƒëƒÉng nh·∫≠p</strong> ƒë·ªÉ ƒë·∫£m b·∫£o t√†i kho·∫£n c·ªßa b·∫°n lu√¥n ƒë∆∞·ª£c b·∫£o v·ªá.</p>
                <hr style="margin: 25px 0; border: none; border-top: 1px solid #ddd;">
                <p style="font-size: 14px; color: #666;">
                N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng <strong>b·ªè qua email n√†y</strong> ho·∫∑c 
                <a href="mailto:pductai14@gmail.com" style="color: #4CAF50; text-decoration: none;">li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ EasyTalk</a> ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p.
                </p>
                <p style="font-size: 14px; color: #666; margin-top: 20px;">
                Tr√¢n tr·ªçng,<br>
                <strong>ƒê·ªôi ng≈© EasyTalk</strong><br>
                <a href="https://easytalk.vn" style="color: #4CAF50; text-decoration: none;">www.easytalk.vn</a>
                </p>
            </div>
            `,
        };
        await this.transporter.sendMail(mailOptions);
        await notificationService.createNotification(
            userId,
            "M·∫≠t kh·∫©u t·∫°m th·ªùi ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i",
            `Qu·∫£n tr·ªã vi√™n ƒë√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·∫°m th·ªùi cho t√†i kho·∫£n c·ªßa b·∫°n, vui l√≤ng ki·ªÉm tra email.`,
            "system"
        );
        return {
            success: true,
            message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u t·∫°m th·ªùi th√†nh c√¥ng! Email ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi ng∆∞·ªùi d√πng.",
            tempPassword,
        };
    }

    async deleteUser(id) {
        const user = await this.userRepository.findById(id);
        if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
        const result = await this.userRepository.delete(id);
        try {
            await notificationService.deleteNotificationsByUser(id);
            await userprogressService.deleteUserProgress(id);
        } catch (error) {
            console.error(`Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o li√™n quan t·ªõi user ${id}:`, error);
        }
        return result;
    }

    // async register(username, email, password, confirmPassword, role = "user") {
    //     if (password !== confirmPassword) throw new Error("Passwords do not match.");
    //     const hashedPassword = await bcrypt.hash(password, 10);
    //     const user = { username, email, password: hashedPassword, role, active: "active" };
    //     const result = await this.userRepository.insert(user);
    //     user._id = result.insertedId;
    //     return user;
    // }

    async sendRegisterCode(username, email, password, role = "user") {
        const exist = await this.userRepository.findByEmail(email);
        if (exist) throw new Error("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng, vui l√≤ng nh·∫≠p email kh√°c!");
        const verificationCode = Math.floor(10000 + Math.random() * 90000);
        const expiresAt = Date.now() + 90 * 1000;
        this.verificationCodes[email] = {
            code: verificationCode,
            expiresAt,
            dataToRegister: { username, email, password, role },
        };
        const mailOptions = {
            from: config.email.user,
            to: email,
            subject: "üîê X√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n EasyTalk",
            html: `
                <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 8px; color: #333;">
                    <h2 style="text-align: center; color: #4CAF50;">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EasyTalk! üéâ</h2>
                    <p>Xin ch√†o <strong>${username}</strong>,</p>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn <strong>EasyTalk</strong> ƒë·ªÉ ƒë·ªìng h√†nh trong h√†nh tr√¨nh h·ªçc ti·∫øng Anh c·ªßa m√¨nh.</p>
                    <p>ƒê·ªÉ ho√†n t·∫•t vi·ªác ƒëƒÉng k√Ω t√†i kho·∫£n, vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c g·ªìm <strong>5 ch·ªØ s·ªë</strong> d∆∞·ªõi ƒë√¢y v√†o √¥ x√°c th·ª±c tr√™n trang ƒëƒÉng k√Ω:</p>
                    <div style="text-align: center; margin: 25px 0;">
                        <h1 style="color: #4CAF50; letter-spacing: 5px;">${verificationCode}</h1>
                    </div>
                    <p><strong>L∆∞u √Ω:</strong> M√£ n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>1 ph√∫t 30 gi√¢y</strong>. Sau th·ªùi gian n√†y, b·∫°n c√≥ th·ªÉ y√™u c·∫ßu g·ª≠i l·∫°i m√£ m·ªõi n·∫øu c·∫ßn.</p>
                    <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
                    <hr style="margin: 25px 0; border: none; border-top: 1px solid #ddd;">
                    <p style="font-size: 14px; color: #666;">Th√¢n m·∫øn,<br><strong>ƒê·ªôi ng≈© EasyTalk</strong><br>
                    <a href="https://easytalk.vn" style="color: #4CAF50; text-decoration: none;">www.easytalk.vn</a></p>
                </div>
            `,
        };
        await this.transporter.sendMail(mailOptions);
        return { success: true, message: "M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.", expiresAt, serverTime: Date.now(), };
    }

    async verifyRegisterCode(email, code) {
        const record = this.verificationCodes[email];
        if (!record) throw new Error("M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i!");
        if (Date.now() > record.expiresAt) {
            delete this.verificationCodes[email];
            throw new Error("M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi!");
        }
        if (String(record.code) !== String(code)) throw new Error("M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ch√≠nh x√°c!");
        const { username, password, role } = record.dataToRegister;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = { username, email, password: hashedPassword, role, active: "active" };
        const result = await this.userRepository.insert(user);
        user._id = result.insertedId;
        delete this.verificationCodes[email];
        return user;
    }

    generateAccessToken(user) {
        return jwt.sign({ id: user._id, role: user.role, username: user.username }, config.jwt.secret, { expiresIn: "15m" });
    }

    generateRefreshToken(user) {
        return jwt.sign({  id: user._id, type: "refresh" }, config.jwt.secret, { expiresIn: "7d" });
    }

    async login(email, password) {
        const user = await this.userRepository.findByEmail(email);
        if (!user)
            throw new Error("Email ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng !!");
        const passwordIsValid = await bcrypt.compare(password, user.password);
        if (!passwordIsValid)
            throw new Error("Email ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng !!");
        if (user.active == "locked")
            throw new Error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ h·ªó tr·ª£ !!");
        const accessToken = this.generateAccessToken(user);
        const refreshToken = this.generateRefreshToken(user);
        this.refreshTokens.set(refreshToken, user._id.toString());
        const language = await usersettingService.getUserLanguage(user._id);
        return { token: accessToken, refreshToken: refreshToken, role: user.role, language };
    }

    async loginWithGoogle(code) {
        const googleUser = await getGoogleUser(code);
        const { email, name } = googleUser;
        let user = await this.userRepository.findByEmail(email);
        let isNewUser = false;
        if (!user) {
            const tempPassword = Math.random().toString(36).slice(-8);
            const hashedPassword = await bcrypt.hash(tempPassword, 10);
            const insertResult = await this.userRepository.insert({
                username: name || email.split("@")[0],
                password: hashedPassword,
                email,
                role: "user",
                active: "active",
            });
            user = { _id: insertResult.insertedId, username: name || email.split("@")[0], email, role: "user", active: "active" };
            isNewUser = true;
            const mailOptions = {
                from: config.email.user,
                to: email,
                subject: "üîë M·∫≠t kh·∫©u t·∫°m th·ªùi t·ª´ EasyTalk",
                html: `
                    <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 8px; color: #333;">
                        <h2 style="text-align: center; color: #4CAF50;">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EasyTalk! üéâ</h2>
                        <p>Xin ch√†o <strong>${name || email.split("@")[0]}</strong>,</p>
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p b·∫±ng <strong>Google</strong> tr√™n n·ªÅn t·∫£ng <strong>EasyTalk</strong>.</p>
                        <p>Ch√∫ng t√¥i ƒë√£ t·∫°o cho b·∫°n m·ªôt <strong>m·∫≠t kh·∫©u t·∫°m th·ªùi</strong> ƒë·ªÉ b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n th√¥ng th∆∞·ªùng (email & m·∫≠t kh·∫©u) n·∫øu mu·ªën. 
                        ƒêi·ªÅu n√†y gi√∫p b·∫°n linh ho·∫°t s·ª≠ d·ª•ng c·∫£ hai c√°ch ƒëƒÉng nh·∫≠p ‚Äî b·∫±ng Google ho·∫∑c tr·ª±c ti·∫øp qua h·ªá th·ªëng.</p>
                        <div style="text-align: center; margin: 25px 0;">
                            <h1 style="color: #4CAF50; letter-spacing: 3px;">${tempPassword}</h1>
                        </div>
                        <p><strong>V√¨ l√Ω do b·∫£o m·∫≠t</strong>, b·∫°n n√™n thay ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu b·∫±ng m·∫≠t kh·∫©u t·∫°m th·ªùi n√†y.</p>
                        <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
                        <hr style="margin: 25px 0; border: none; border-top: 1px solid #ddd;">
                        <p style="font-size: 14px; color: #666;">Th√¢n m·∫øn,<br><strong>ƒê·ªôi ng≈© EasyTalk</strong><br>
                        <a href="https://easytalk.vn" style="color: #4CAF50; text-decoration: none;">www.easytalk.vn</a></p>
                    </div>
                `,
            };
            this.transporter.sendMail(mailOptions, (error) => {
                if (error) console.error("G·ª≠i email th·∫•t b·∫°i:", error);
                else console.log(`‚úÖ ƒê√£ g·ª≠i m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·∫øn ${email}`);
            });
        }
        if (user.active == "locked") {
            throw new Error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ h·ªó tr·ª£!");
        }
        if (isNewUser) {
            await notificationService.createNotification(
                user._id,
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EasyTalk!",
                "B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi th√†nh c√¥ng. H√£y b·∫Øt ƒë·∫ßu h·ªçc ngay h√¥m nay nh√©!",
                "success"
            );
            await notificationService.createNotification(
                user._id,
                "M·∫≠t kh·∫©u t·∫°m th·ªùi ƒë√£ g·ª≠i t·ªõi email!",
                `Khi ƒëƒÉng nh·∫≠p Google, m·∫≠t kh·∫©u t·∫°m th·ªùi s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email ${email}. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ email nh√©!`,
                "system"
            );
        }
        const accessToken = this.generateAccessToken(user);
        const refreshToken = this.generateRefreshToken(user);
        this.refreshTokens.set(refreshToken, user._id.toString());
        const language = await usersettingService.getUserLanguage(user._id);
        return { token: accessToken, refreshToken: refreshToken, role: user.role, language };
    }

    async loginWithFacebook(code) {
        const tokenData = await getFacebookAccessToken(code);
        const accessToken = tokenData.access_token;
        const fbUser = await getFacebookUser(accessToken);
        const { email, name, id: facebookId } = fbUser;
        const userEmail = email || `facebook-${facebookId}@easytalk.com`;
        let user = await this.userRepository.findByEmail(userEmail);
        if (!user) {
            const tempPassword = Math.random().toString(36).slice(-8);
            const hashedPassword = await bcrypt.hash(tempPassword, 10);
            await this.userRepository.insert({
                username: name || userEmail.split("@")[0],
                password: hashedPassword,
                email: userEmail,
                role: "user",
                active: "active",
                facebookId,
            });
            const mailOptions = {
                from: config.email.user,
                to: userEmail,
                subject: "üîë M·∫≠t kh·∫©u t·∫°m th·ªùi t·ª´ EasyTalk",
                html: `
                    <p>Xin ch√†o <strong>${name || userEmail.split("@")[0]}</strong>,</p>
                    <p>B·∫°n v·ª´a ƒëƒÉng k√Ω t√†i kho·∫£n b·∫±ng Facebook tr√™n EasyTalk.</p>
                    <p>ƒê√¢y l√† m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·ªÉ b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng email n·∫øu mu·ªën:</p>
                    <h3 style="color:#4CAF50;">${tempPassword}</h3>
                    <p>V√¨ l√Ω do b·∫£o m·∫≠t, b·∫°n n√™n ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p.</p>
                    <br/>
                    <p>Tr√¢n tr·ªçng,<br>Nh√≥m h·ªó tr·ª£ EasyTalk</p>
                `,
            };
            this.transporter.sendMail(mailOptions, (error) => {
                if (error) console.error("G·ª≠i email th·∫•t b·∫°i:", error);
                else console.log(`‚úÖ ƒê√£ g·ª≠i m·∫≠t kh·∫©u t·∫°m th·ªùi ƒë·∫øn ${userEmail}`);
            });
            user = await this.userRepository.findByEmail(userEmail);
        }
        if (user.active == "locked") {
            throw new Error("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ h·ªó tr·ª£!");
        }
        const newAccessToken = this.generateAccessToken(user);
        const newRefreshToken = this.generateRefreshToken(user);
        this.refreshTokens.set(newRefreshToken, user._id.toString());
        return { token: newAccessToken, refreshToken: newRefreshToken, role: user.role };
    }

    async refreshAccessToken(refreshToken) {
        if (!refreshToken) {
            throw new Error("Refresh token kh√¥ng t·ªìn t·∫°i");
        }
        if (!this.refreshTokens.has(refreshToken)) {
            throw new Error("Refresh token kh√¥ng h·ª£p l·ªá");
        }
        try {
            const decoded = jwt.verify(refreshToken, config.jwt.secret);
            if (decoded.type !== "refresh") {
                throw new Error("Token kh√¥ng ph·∫£i refresh token");
            }
            const user = await this.userRepository.findById(decoded.id);
            if (!user) throw new Error("User kh√¥ng t·ªìn t·∫°i");
            if (user.active == "locked") {
                throw new Error("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a");
            }
            const newAccessToken = this.generateAccessToken(user);
            return { 
                token: newAccessToken,
                role: user.role 
            };
        } catch (error) {
        this.refreshTokens.delete(refreshToken);
            throw new Error("Refresh token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá");
        }
    }

    async logout(refreshToken) {
        if (refreshToken) {
            this.refreshTokens.delete(refreshToken);
        }
        return { message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" };
    }

    async changePassword(userId, currentPassword, newPassword, confirmNewPassword) {
        if (!currentPassword || !newPassword || !confirmNewPassword)
            throw new Error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin m·∫≠t kh·∫©u.");
        if (newPassword !== confirmNewPassword)
            throw new Error("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.");
        const user = await this.userRepository.findById(userId);
        if (!user)
            throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
        const passwordIsValid = await bcrypt.compare(currentPassword, user.password);
        if (!passwordIsValid)
            throw new Error("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c.");
        const hashedNewPassword = await bcrypt.hash(newPassword, 10);
        await this.userRepository.updatePassword(userId, hashedNewPassword);
        return { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." };
    }

    async sendForgotPasswordCode(email) {
        const user = await this.userRepository.findByEmail(email);
        if (!user)
            throw new Error("Email ƒë√£ nh·∫≠p kh√¥ng t·ªìn t·∫°i tr√™n h·ªá th·ªëng !!");
        const verificationCode = Math.floor(10000 + Math.random() * 90000);
        const expiresAt = Date.now() + 60 * 1000;
        this.verificationCodes[email] = { code: verificationCode, expiresAt };
        const mailOptions = {
            from: config.email.user,
            to: email,
            subject: "üîí M√£ X√°c Th·ª±c ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u - EasyTalk",
            html: `
                <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 8px; color: #333;">
                    <h2 style="text-align: center; color: #4CAF50;">Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u üîë</h2>
                    <p>Xin ch√†o <strong>${name || email.split("@")[0]}</strong>,</p>
                    <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu <strong>ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</strong> cho t√†i kho·∫£n c·ªßa b·∫°n tr√™n <strong>EasyTalk</strong>.</p>
                    <p>Vui l√≤ng s·ª≠ d·ª•ng <strong>m√£ x√°c th·ª±c 5 s·ªë</strong> b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c qu√° tr√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.  
                    M√£ c√≥ hi·ªáu l·ª±c trong <strong>1 ph√∫t</strong>.</p>
                    <div style="text-align: center; margin: 25px 0;">
                        <h1 style="color: #4CAF50; letter-spacing: 4px;">${verificationCode}</h1>
                    </div>
                    <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng <strong>b·ªè qua email n√†y</strong> ho·∫∑c 
                    <a href="mailto:pductai14@gmail.com" style="color: #4CAF50; text-decoration: none;">li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ EasyTalk</a> ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p.</p>
                    <hr style="margin: 25px 0; border: none; border-top: 1px solid #ddd;">
                    <p style="font-size: 14px; color: #666;">
                        Tr√¢n tr·ªçng,<br>
                        <strong>ƒê·ªôi ng≈© EasyTalk</strong><br>
                        <a href="https://easytalk.vn" style="color: #4CAF50; text-decoration: none;">www.easytalk.vn</a>
                    </p>
                </div>
            `,
        };
        await this.transporter.sendMail(mailOptions);
        return { success: true, message: "M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!", expiresAt, serverTime: Date.now() };
    }

    verifyForgotPasswordCode(email, code) {
        const record = this.verificationCodes[email];
        if (!record)
            throw new Error("M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i!");
        if (Date.now() > record.expiresAt) {
            delete this.verificationCodes[email];
            throw new Error("M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i l·∫°i m√£ m·ªõi!");
        }
        if (String(record.code) !== String(code))
            throw new Error("M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ch√≠nh x√°c!");

        delete this.verificationCodes[email];
        return { success: true, message: "M√£ x√°c th·ª±c ch√≠nh x√°c!" };
    }

    async resetPassword(email, newPassword) {
        const user = await this.userRepository.findByEmail(email);
        if (!user)
            throw new Error("User not found");
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await this.userRepository.updatePassword(user._id, hashedPassword);
        return { message: "Password reset successful" };
    }

    async updateProfile(userId, username, email) {
        const updatedUser = await this.userRepository.update(userId, { username, email });
        if (!updatedUser)
            throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng !");
        return { success: true, message: "Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng !", user: updatedUser };
    }

    async getUserById(userId) {
        return await this.userRepository.findById(userId);
    }
}

module.exports = UserService;