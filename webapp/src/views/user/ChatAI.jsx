import React, { useState, useEffect, useRef, useContext } from "react";
import { UNSAFE_NavigationContext } from "react-router-dom";
import LoadingScreen from "@/components/user/LoadingScreen.jsx";
import ChatAIMessage from "@/components/user/chatAI/ChatAIMessage.jsx";
import ChatAIInput from "@/components/user/chatAI/ChatAIInput.jsx";
import { ChatAIService } from "@/services/ChatAIService.jsx";
import Swal from "sweetalert2";

function ChatAI() {
    const [messages, setMessages] = useState([]);
    const [isSending, setIsSending] = useState(false);
    const [sessionTopic, setSessionTopic] = useState(null);
    const [step, setStep] = useState("ask_name");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [lastBotText, setLastBotText] = useState("");
    const [speakingWordIndex, setSpeakingWordIndex] = useState(null);
    const [isFirstMessage, setIsFirstMessage] = useState(true);
    const [isLoading, setIsLoading] = useState(true);
    const hasStarted = messages.length > 0;
    const allowNavigationRef = useRef(false);
    const { navigator } = useContext(UNSAFE_NavigationContext);

    useEffect(() => {
        document.title = "Giao ti·∫øp v·ªõi AI - EasyTalk";
        const startConversation = async () => {
            try {
                const data = await ChatAIService.startConversation();
                setMessages([{ sender: "bot", text: data.response, suggestion: data.suggestion }]);
                setStep(data.step);
                setLastBotText(data.response);
                speakText(data.response);
                setIsFirstMessage(false);
            } catch (err) {
                console.error("Error starting conversation:", err);
            } finally {
                setIsLoading(false);
            }
        };
        startConversation();
    }, []);

    useEffect(() => {
        if (lastBotText && !isFirstMessage) {
            speakText(lastBotText);
        }
    }, [lastBotText]);

    useEffect(() => {
        const chatBox = document.getElementById("chat-ai-box");
        if (chatBox) {
            chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
        }
    }, [messages]);

    useEffect(() => {
        if (!navigator || !hasStarted) return;
        const originalPush = navigator.push;
        const originalReplace = navigator.replace;
        const handleNavigation = async (originalMethod, args) => {
            if (!allowNavigationRef.current && hasStarted) {
                const result = await Swal.fire({
                    icon: "warning",
                    title: "C·∫£nh b√°o",
                    text: "B·∫°n ƒëang trong cu·ªôc h·ªôi tho·∫°i v·ªõi AI. N·∫øu r·ªùi ƒëi, n·ªôi dung s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi ƒëi?",
                    showCancelButton: true,
                    confirmButtonText: "R·ªùi ƒëi",
                    cancelButtonText: "·ªû l·∫°i",
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                });
                if (result.isConfirmed) {
                    allowNavigationRef.current = true;
                    originalMethod.apply(navigator, args);
                }
            } else {
                originalMethod.apply(navigator, args);
            }
        };
        navigator.push = (...args) => handleNavigation(originalPush, args);
        navigator.replace = (...args) => handleNavigation(originalReplace, args);
        return () => {
            navigator.push = originalPush;
            navigator.replace = originalReplace;
        };
    }, [navigator, hasStarted]);

    useEffect(() => {
        const handleBeforeUnload = (e) => {
            if (hasStarted) {
                e.preventDefault();
                e.returnValue = "";
                return "";
            }
        };
        window.addEventListener("beforeunload", handleBeforeUnload);
        return () => {
            window.removeEventListener("beforeunload", handleBeforeUnload);
        };
    }, [hasStarted]);

    const speakText = (text) => {
        if (!window.speechSynthesis) return;
        let cleanText = text.replace(/<[^>]+>/g, "");
        cleanText = cleanText.replace(
            /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|\uD83E[\uDD00-\uDDFF])/g,
            ""
        );
        const utterance = new SpeechSynthesisUtterance(cleanText.trim());
        utterance.lang = "en-US";
        utterance.rate = 1;
        utterance.pitch = 1;

        const words = cleanText.trim().split(" ");
        utterance.onboundary = (event) => {
            if (event.name == "word" || event.name == "text") {
                let charIndex = event.charIndex;
                let count = 0;
                for (let i = 0; i < words.length; i++) {
                    count += words[i].length + 1;
                    if (charIndex < count) {
                        setSpeakingWordIndex(i);
                        break;
                    }
                }
            }
        };

        utterance.onend = () => {
            setSpeakingWordIndex(null);
        };
        window.speechSynthesis.cancel();
        window.speechSynthesis.speak(utterance);
    };

    const handleSendMessage = async (text) => {
        if (isSending)
            return Swal.fire({
                icon: "warning",
                title: "C·∫£nh b√°o",
                text: "ƒêang g·ª≠i tin nh·∫Øn, vui l√≤ng ƒë·ª£i...",
            });
        setIsSending(true);
        setMessages((prev) => [...prev, { sender: "user", text }]);
        try {
            const data = await ChatAIService.sendMessage(text, sessionTopic, step);
            if (!sessionTopic) setSessionTopic(data.topic);
            if (data.step) setStep(data.step);

            setMessages((prev) => [
                ...prev,
                { sender: "bot", text: data.response || "...", suggestion: data.suggestion },
            ]);
            setLastBotText(data.response || "...");
        } catch (error) {
            setMessages((prev) => [
                ...prev,
                { sender: "bot", text: "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i." },
            ]);
        } finally {
            setIsSending(false);
        }
    };

    if (isLoading) return <LoadingScreen />;

    return (
        <>
            <div className="container chat-ai-container">
                <div className="chat-ai-header text-center">
                    <h3>Giao Ti·∫øp V·ªõi AI - Th·ª±c H√†nh Ti·∫øng Anh
                        <i
                            className="fas fa-question-circle help-icon"
                            style={{ cursor: "pointer" }}
                            onClick={() => setIsModalOpen(true)}
                        ></i>
                    </h3>
                </div>
                <div id="chat-ai-box" className="chat-ai-box">
                    {messages.map((msg, idx) => (
                        <ChatAIMessage
                            key={idx}
                            message={msg}
                            speakingWordIndex={
                                msg.sender == "bot" && idx == messages.length - 1
                                    ? speakingWordIndex
                                    : null
                            }
                        />
                    ))}
                </div>
                <ChatAIInput onSend={handleSendMessage} disabled={isSending} />
            </div>
            {isModalOpen && (
                <div className="custom-modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div
                        className="custom-modal"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <div className="custom-modal-header">
                            <h5>H∆∞·ªõng D·∫´n Luy·ªán Giao Ti·∫øp V·ªõi AI</h5>
                            <button className="close-btn" onClick={() => setIsModalOpen(false)}>
                                &times;
                            </button>
                        </div>
                        <div className="custom-modal-body">
                            <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch·ª©c nƒÉng <strong>Giao ti·∫øp v·ªõi AI</strong>. T·∫°i ƒë√¢y, b·∫°n c√≥ th·ªÉ luy·ªán t·∫≠p n√≥i ti·∫øng Anh tr·ª±c ti·∫øp v·ªõi AI.</p>
                            <p>
                                <strong>C√°c b∆∞·ªõc th·ª±c hi·ªán:</strong>
                            </p>
                            <ul>
                                <li><strong>Tr√≤ chuy·ªán:</strong> Nh·∫≠p c√¢u h·ªèi ho·∫∑c ph·∫£n h·ªìi c·ªßa b·∫°n v√†o √¥ chat v√† nh·∫•n g·ª≠i.</li>
                                <li><strong>Ph·∫£n h·ªìi t·ª´ AI:</strong> AI s·∫Ω tr·∫£ l·ªùi b·∫°n b·∫±ng ti·∫øng Anh, gi√∫p b·∫°n luy·ªán t·∫≠p ph·∫£n x·∫° v√† ng·ªØ ph√°p.</li>
                                <li><strong>Nghe ph√°t √¢m:</strong> AI s·∫Ω ƒë·ªçc to c√¢u tr·∫£ l·ªùi, b·∫°n c√≥ th·ªÉ theo d√µi t·ª´ n√†o ƒëang ƒë∆∞·ª£c ph√°t √¢m.</li>
                                <li><strong>ƒê√°nh d·∫•u t·ª´:</strong> C√°c t·ª´ AI ƒëang ph√°t √¢m s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u, gi√∫p b·∫°n d·ªÖ theo d√µi v√† luy·ªán ph√°t √¢m.</li>
                                <li><strong>Ti·∫øp t·ª•c h·ªôi tho·∫°i:</strong> Nh·∫≠p th√™m c√¢u h·ªèi ho·∫∑c ph·∫£n h·ªìi ƒë·ªÉ AI ti·∫øp t·ª•c tr√≤ chuy·ªán c√πng b·∫°n.</li>
                            </ul>
                            <p><strong>L∆∞u √Ω:</strong></p>
                            <ul>
                                <li>Nghe k·ªπ c√¢u tr·∫£ l·ªùi v√† c·ªë g·∫Øng nh·∫°i theo ƒë·ªÉ c·∫£i thi·ªán ph√°t √¢m.</li>
                                <li>ƒê·ª´ng ng·∫ßn ng·∫°i th·ª≠ c√°c c√¢u h·ªèi kh√°c nhau ƒë·ªÉ n√¢ng cao k·ªπ nƒÉng giao ti·∫øp.</li>
                            </ul>
                            <p>üéâ Ch√∫c b·∫°n luy·ªán t·∫≠p giao ti·∫øp hi·ªáu qu·∫£ v√† t·ª± tin h∆°n m·ªói ng√†y!</p>
                        </div>
                        <div className="custom-modal-footer">
                            <button className="footer-btn" onClick={() => setIsModalOpen(false)}>ƒê√≥ng</button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

export default ChatAI;