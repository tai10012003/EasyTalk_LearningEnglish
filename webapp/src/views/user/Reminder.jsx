import React, { useEffect, useState } from "react";
import AddReminder from "@/components/user/reminder/AddReminder.jsx";
import UpdateReminder from "@/components/user/reminder/UpdateReminder.jsx";
import ReminderCard from "@/components/user/reminder/ReminderCard.jsx";
import { ReminderService } from "@/services/ReminderService.jsx";
import LoadingScreen from "@/components/user/LoadingScreen.jsx";
import Swal from "sweetalert2";

function Reminder() {
    const [reminders, setReminders] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [showAdd, setShowAdd] = useState(false);
    const [showUpdate, setShowUpdate] = useState(false);
    const [selectedReminder, setSelectedReminder] = useState(null);

    const loadReminders = async () => {
        setIsLoading(true);
        try {
            const data = await ReminderService.fetchReminders();
            const list = Array.isArray(data) ? data : (data.reminders || data);
            setReminders(list || []);
        } catch (err) {
            console.error("Load reminders error:", err);
            Swal.fire({ icon: "error", title: "L·ªói", text: "Kh√¥ng th·ªÉ t·∫£i nh·∫Øc nh·ªü." });
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        loadReminders();
    }, []);

    const handleCreated = () => loadReminders();
    const handleUpdated = () => loadReminders();
    const handleDeleted = () => loadReminders();

    const openUpdate = (reminder) => {
        setSelectedReminder(reminder);
        setShowUpdate(true);
    };

    if (isLoading) return <LoadingScreen />;
    
    return (
        <>
            <div className="lesson-container">
                <div className="hero-mini">
                    <h3 className="hero-title">NH·∫ÆC NH·ªû H·ªåC T·∫¨P C·ª¶A B·∫†N
                    <i
                        className="fas fa-question-circle help-icon"
                        style={{ cursor: "pointer" }}
                        onClick={() => setIsModalOpen(true)}
                    ></i></h3>
                </div>
                <div className="container">
                    <div className="lesson-list">
                        <button className="btn_1" onClick={() => setShowAdd(true)}>
                            <i className="fas fa-plus"></i> Th√™m nh·∫Øc nh·ªü
                        </button>
                    </div>
                    { reminders.length > 0 ? (
                        <div className="container">
                            <div className="row">
                                {reminders.map((r) => (
                                    <ReminderCard key={r._id} reminder={r} onEdit={openUpdate} onDeleted={handleDeleted} />
                                ))}
                            </div>
                        </div>
                    ) : (
                        <p className="text-center no-stories">Ch∆∞a c√≥ nh·∫Øc nh·ªü n√†o. H√£y th√™m nh·∫Øc nh·ªü ƒë·ªÉ h·ªá th·ªëng g·ª≠i email nh·∫Øc b·∫°n</p>
                    )}
                    <nav aria-label="Page navigation">
                        <ul className="pagination justify-content-center" id="pagination-controls">
                            {/* {renderPagination()} */}
                        </ul>
                    </nav>
                </div>
                <AddReminder isOpen={showAdd} onClose={() => setShowAdd(false)} onCreated={handleCreated} />
                <UpdateReminder
                    isOpen={showUpdate}
                    onClose={() => { setShowUpdate(false); setSelectedReminder(null); }}
                    onUpdated={handleUpdated}
                    reminder={selectedReminder}
                />
            </div>
            {isModalOpen && (
                <div className="custom-modal-overlay" onClick={() => setIsModalOpen(false)}>
                    <div
                        className="custom-modal"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <div className="custom-modal-header">
                            <h5>H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Nh·∫Øc Nh·ªü H·ªçc T·∫≠p</h5>
                            <button className="close-btn" onClick={() => setIsModalOpen(false)}>
                                &times;
                            </button>
                        </div>
                        <div className="custom-modal-body">
                            <p>Ph·∫ßn Nh·∫Øc nh·ªü gi√∫p b·∫°n qu·∫£n l√Ω l·ªãch h·ªçc v√† nh·∫≠n email th√¥ng b√°o ƒë√∫ng th·ªùi gian.</p>
                            <p><strong>C√°c ch·ª©c nƒÉng ch√≠nh:</strong></p>
                            <ul>
                                <li><strong>Th√™m nh·∫Øc nh·ªü:</strong> Nh·∫•n n√∫t <strong>Th√™m nh·∫Øc nh·ªü</strong> ƒë·ªÉ t·∫°o m·ªõi, nh·∫≠p email, th·ªùi gian v√† t·∫ßn su·∫•t (H√†ng ng√†y, H√†ng tu·∫ßn, H√†ng th√°ng).</li>
                                <li><strong>Ch·ªânh s·ª≠a nh·∫Øc nh·ªü:</strong> Nh·∫•n bi·ªÉu t∆∞·ª£ng <i className="fas fa-edit"></i> tr√™n card nh·∫Øc nh·ªü ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin.</li>
                                <li><strong>X√≥a nh·∫Øc nh·ªü:</strong> Nh·∫•n bi·ªÉu t∆∞·ª£ng <i className="fas fa-trash"></i> tr√™n card nh·∫Øc nh·ªü ƒë·ªÉ x√≥a nh·∫Øc nh·ªü kh√¥ng c·∫ßn thi·∫øt.</li>
                                <li><strong>Danh s√°ch nh·∫Øc nh·ªü:</strong> Xem t·∫•t c·∫£ nh·∫Øc nh·ªü ƒë√£ t·∫°o v√† ki·ªÉm tra email, th·ªùi gian, t·∫ßn su·∫•t.</li>
                            </ul>
                            <p><strong>L∆∞u √Ω:</strong></p>
                            <ul>
                                <li>Nh·∫Øc nh·ªü s·∫Ω g·ª≠i email ƒë√∫ng th·ªùi gian v√† t·∫ßn su·∫•t b·∫°n ƒë√£ ch·ªçn.</li>
                                <li>C√≥ th·ªÉ x√≥a ho·∫∑c ch·ªânh s·ª≠a b·∫•t k·ª≥ nh·∫Øc nh·ªü n√†o n·∫øu th√¥ng tin kh√¥ng c√≤n ph√π h·ª£p.</li>
                                <li>H√£y ƒë·∫£m b·∫£o email nh·∫≠p ƒë√∫ng ƒë·ªÉ nh·∫≠n th√¥ng b√°o.</li>
                            </ul>
                            <p>üéØ S·ª≠ d·ª•ng nh·∫Øc nh·ªü ƒë·ªÉ duy tr√¨ th√≥i quen h·ªçc t·∫≠p hi·ªáu qu·∫£!</p>
                        </div>
                        <div className="custom-modal-footer">
                            <button className="footer-btn" onClick={() => setIsModalOpen(false)}>ƒê√≥ng</button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}

export default Reminder;