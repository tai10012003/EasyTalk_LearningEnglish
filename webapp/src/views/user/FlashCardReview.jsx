import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import LoadingScreen from '@/components/user/LoadingScreen.jsx';
import { FlashCardService } from "@/services/FlashCardService.jsx";
import FlashCardReviewCard from "@/components/user/flashcard/FlashCardReviewCard.jsx";
import Swal from "sweetalert2";

const FlashCardReview = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [flashcards, setFlashcards] = useState([]);
    const [listName, setListName] = useState(""); 
    const [currentIndex, setCurrentIndex] = useState(0);
    const [mode, setMode] = useState("flip");
    const [isLoading, setIsLoading] = useState(false);

    useEffect(() => {
        document.title = "√în t·∫≠p flashcard - EasyTalk";
        const load = async () => {
            setIsLoading(true);
            try {
                const data = await FlashCardService.fetchReview(id);
                setFlashcards(data.flashcards);
                setListName(data.flashcardList.name);  
                setCurrentIndex(0);
                randomMode();
            } catch (err) {
                Swal.fire({
                    icon: "error",
                    title: "L·ªói t·∫£i flashcard",
                    text: err.message,
                    confirmButtonText: "Quay l·∫°i",
                }).then(() => navigate("/flashcards"));
            }
            setIsLoading(false);
        };
        load();
    }, [id]);

    const randomMode = () => {
        let modes = ["flip", "choice", "fill"];
        if (flashcards.length < 4) {
            modes = modes.filter(m => m !== "choice");
        }
        setMode(modes[Math.floor(Math.random() * modes.length)]);
    };

    const handleNext = () => {
        if (flashcards.length == 0) return;
        const nextIdx = Math.floor(Math.random() * flashcards.length);
        setCurrentIndex(nextIdx);
        randomMode();
    };

    const handleRemove = async () => {
        const result = await Swal.fire({
            title: "X√°c nh·∫≠n x√≥a t·ª´ v·ª±ng",
            text: "B·∫°n ƒë√£ nh·ªõ t·ª´ n√†y r·ªìi ch·ª©? H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x√≥a t·ª´ v·ª±ng ƒë√£ ghi nh·ªõ kh·ªèi danh s√°ch luy·ªán t·∫≠p!",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: "ƒê√∫ng v·∫≠y",
            cancelButtonText: "H·ªßy",
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
        });

        if (result.isConfirmed) {
            const updated = flashcards.filter((_, idx) => idx !== currentIndex);
            setFlashcards(updated);
            if (updated.length == 0) {
                Swal.fire({
                    icon: "success",
                    title: "üéâ Ho√†n th√†nh!",
                    text: "B·∫°n ƒë√£ ho√†n th√†nh luy·ªán t·∫≠p!",
                    confirmButtonText: "OK",
                }).then(() => navigate(`/flashcards/flashcardlist/${id}`));
            } else {
                setCurrentIndex(0);
                randomMode();
                Swal.fire({
                    icon: "success",
                    title: "ƒê√£ x√≥a t·ª´ v·ª±ng",
                    text: "T·ª´ v·ª±ng ƒë√£ ƒë∆∞·ª£c lo·∫°i kh·ªèi danh s√°ch √¥n t·∫≠p.",
                    timer: 1500,
                    showConfirmButton: false,
                });
            }
        }
    };

    const handleCheckAnswer = (answer, correct) => {
        if (answer.toLowerCase() == correct.toLowerCase()) {
            Swal.fire({
                icon: "success",
                title: "Ch√≠nh x√°c!",
                timer: 1200,
                showConfirmButton: false,
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Sai r·ªìi!",
                text: `ƒê√°p √°n ƒë√∫ng l√†: ${correct}`,
            });
        }
    };

    const handleStop = async () => {
        const result = await Swal.fire({
            title: "D·ª´ng h·ªçc?",
            text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën d·ª´ng h·ªçc kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, d·ª´ng l·∫°i",
            cancelButtonText: "Ti·∫øp t·ª•c h·ªçc",
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
        });

        if (result.isConfirmed) {
            navigate(`/flashcards/flashcardlist/${id}`);
        }
    };

    if (isLoading) return <LoadingScreen />;
    if (flashcards.length == 0) return <p>Kh√¥ng c√≥ flashcards n√†o.</p>;

    return (
        <div className="flashcard-review-container">
            <div className="section_tittle" style={{ marginBottom: "30px" }}>
                <h3 className="title">Luy·ªán t·∫≠p: {listName}</h3> 
            </div>
            <button className="btn_1" onClick={handleStop}>
                <i className="fas fa-stop-circle mr-2"></i>D·ª´ng h·ªçc
            </button>
            <FlashCardReviewCard
                card={flashcards[currentIndex]}
                mode={mode}
                onCheckAnswer={handleCheckAnswer}
                allWords={flashcards.map(c => c.word)}
            />
            <div className="flashcard-review-actions">
                <button className="btn_1 danger" onClick={handleRemove}><i className="fas fa-check-circle"></i>ƒê√£ nh·ªõ t·ª´ v·ª±ng</button>
                <button className="btn_1 primary" onClick={handleNext}><i className="fas fa-arrow-right"></i>Ti·∫øp theo</button>
            </div>
        </div>
    );
};

export default FlashCardReview;